/*
 * MIT License
 *
 * Copyright (c) 2022 Sepehrdad
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// auto generated by nuclei2zap
var RISK = 3 // 0: info, 1: low, 2: medium, 3: high
var CONFIDENCE = 3 // 0: falsePositive, 1: low, 2: medium, 3: high, 4: confirmed
var TITLE = "[CVE-2018-9161] PrismaWEB - Credentials Disclosure"
var DESCRIPTION = "PrismaWEB is susceptible to credential disclosure. The vulnerability exists due to the disclosure of hard-coded credentials allowing an attacker to effectively bypass authentication of PrismaWEB with administrator privileges. The credentials can be disclosed by simply navigating to the login_par.js JavaScript page that holds the username and password for the management interface that are being used via the Login() function in /scripts/functions_cookie.js script."
var SOLUTION = "Apply all relevant security patches and product upgrades."
var REFERENCE = "https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5453.php"
var OTHER = "see: https://www.cvedetails.com/cve/CVE-2018-9161"

function log(msg) {
	print("[" + this["zap.script.name"] + "] " + msg);
}

function alert(as, msg, evidence) {
	as.newAlert()
		.setRisk(RISK)
		.setConfidence(CONFIDENCE)
		.setName(TITLE)
		.setDescription(DESCRIPTION)
		.setEvidence(evidence)
		.setOtherInfo(OTHER)
		.setSolution(SOLUTION)
		.setReference(REFERENCE)
		.setMessage(msg)
		.raise();
}

function scanNode(as, msg) {

	var uri = msg.getRequestHeader().getURI();

	if (uri.getPath() != null && uri.getPath().length() > 1) {
		log("ignoring scan for " + uri);
		return;
	}

	log("scanning " + uri);

	// Copy requests before reusing them
	msg = msg.cloneRequest();

	uri = msg.getRequestHeader().getURI();
	uri.setPath("/user/scripts/login_par.js");

	// sendAndReceive(msg, followRedirect, handleAntiCSRFtoken)
	as.sendAndReceive(msg, false, false);

	var response_header = msg.getResponseHeader();
	var response_body = msg.getResponseBody();

	var evidence_idx = response_body.toString().indexOf("txtChkUser");

	// Test the response here, and make other requests as required
	if (response_header.getStatusCode() == 200 && evidence_idx >= 0) {
		alert(as, msg, response_body.toString().substring(evidence_idx));
	}
}

function scan(as, msg, param, value) {
	return;
}
